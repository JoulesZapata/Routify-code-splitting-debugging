
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, c as component_subscribe, T as globals, z as element, H as space, E as attr_dev, A as add_location, b as insert_dev, C as append_dev, j as detach_dev, I as destroy_each, n as noop, D as text, G as set_data_dev, U as prop_dev, m as create_component, B as set_style, o as mount_component, u as group_outros, f as transition_out, w as destroy_component, x as check_outros, t as transition_in } from './index-4e59569a.js';
import { u as url, l as leftover } from './index-5bd4e51a.js';

/* src\pages\example\_components\CrudWidget\_list.svelte generated by Svelte v3.16.4 */

const { Object: Object_1 } = globals;
const file = "src\\pages\\example\\_components\\CrudWidget\\_list.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i][0];
	child_ctx[7] = list[i][1];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (17:12) {#each Object.entries(item).slice(0,3) as [name, value]}
function create_each_block_1(ctx) {
	let div;
	let b;
	let t0_value = /*name*/ ctx[6] + "";
	let t0;
	let t1;
	let t2;
	let t3_value = /*value*/ ctx[7] + "";
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			b = element("b");
			t0 = text(t0_value);
			t1 = text(":");
			t2 = space();
			t3 = text(t3_value);
			add_location(b, file, 18, 17, 412);
			add_location(div, file, 17, 17, 388);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, b);
			append_dev(b, t0);
			append_dev(b, t1);
			append_dev(div, t2);
			append_dev(div, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*data*/ 1 && t0_value !== (t0_value = /*name*/ ctx[6] + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*data*/ 1 && t3_value !== (t3_value = /*value*/ ctx[7] + "")) set_data_dev(t3, t3_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(17:12) {#each Object.entries(item).slice(0,3) as [name, value]}",
		ctx
	});

	return block;
}

// (15:4) {#each data as item}
function create_each_block(ctx) {
	let a;
	let t;
	let a_href_value;
	let each_value_1 = Object.entries(/*item*/ ctx[3]).slice(0, 3);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			a = element("a");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr_dev(a, "href", a_href_value = /*$url*/ ctx[1]("../:id", { id: /*item*/ ctx[3].id }));
			attr_dev(a, "class", "item svelte-f3hq2");
			add_location(a, file, 15, 9, 246);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(a, null);
			}

			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*data*/ 1) {
				each_value_1 = Object.entries(/*item*/ ctx[3]).slice(0, 3);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(a, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty[0] & /*$url, data*/ 3 && a_href_value !== (a_href_value = /*$url*/ ctx[1]("../:id", { id: /*item*/ ctx[3].id }))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(15:4) {#each data as item}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let each_value = /*data*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "items");
			add_location(div, file, 13, 0, 190);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$url, data*/ 3) {
				each_value = /*data*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $url;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(1, $url = $$value));
	let { data } = $$props, { id } = $$props;
	const writable_props = ["data", "id"];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<List> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
		if ("id" in $$props) $$invalidate(2, id = $$props.id);
	};

	$$self.$capture_state = () => {
		return { data, id, $url };
	};

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
		if ("id" in $$props) $$invalidate(2, id = $$props.id);
		if ("$url" in $$props) url.set($url = $$props.$url);
	};

	return [data, $url, id];
}

class List extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { data: 0, id: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "List",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*data*/ ctx[0] === undefined && !("data" in props)) {
			console.warn("<List> was created without expected prop 'data'");
		}

		if (/*id*/ ctx[2] === undefined && !("id" in props)) {
			console.warn("<List> was created without expected prop 'id'");
		}
	}

	get data() {
		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<List>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<List>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\pages\example\_components\CrudWidget\_update.svelte generated by Svelte v3.16.4 */

const { Object: Object_1$1 } = globals;
const file$1 = "src\\pages\\example\\_components\\CrudWidget\\_update.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i][0];
	child_ctx[5] = list[i][1];
	return child_ctx;
}

// (9:4) {#each Object.entries(item) as [name, value]}
function create_each_block$1(ctx) {
	let div;
	let b;
	let t0_value = /*name*/ ctx[4] + "";
	let t0;
	let t1;
	let t2;
	let input;
	let input_value_value;
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			b = element("b");
			t0 = text(t0_value);
			t1 = text(":");
			t2 = space();
			input = element("input");
			t3 = space();
			add_location(b, file$1, 10, 8, 233);
			attr_dev(input, "type", "text");
			input.value = input_value_value = /*value*/ ctx[5];
			add_location(input, file$1, 11, 8, 257);
			add_location(div, file$1, 9, 6, 218);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, b);
			append_dev(b, t0);
			append_dev(b, t1);
			append_dev(div, t2);
			append_dev(div, input);
			append_dev(div, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*item*/ 2 && t0_value !== (t0_value = /*name*/ ctx[4] + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*item*/ 2 && input_value_value !== (input_value_value = /*value*/ ctx[5])) {
				prop_dev(input, "value", input_value_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(9:4) {#each Object.entries(item) as [name, value]}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let t0;
	let br;
	let t1;
	let a;
	let t2;
	let a_href_value;
	let each_value = Object.entries(/*item*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			br = element("br");
			t1 = space();
			a = element("a");
			t2 = text("Back");
			add_location(div0, file$1, 7, 2, 153);
			add_location(br, file$1, 15, 2, 325);
			attr_dev(a, "href", a_href_value = /*$url*/ ctx[2]("../:id", { id: /*id*/ ctx[0] }));
			add_location(a, file$1, 16, 2, 333);
			add_location(div1, file$1, 6, 0, 143);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div1, t0);
			append_dev(div1, br);
			append_dev(div1, t1);
			append_dev(div1, a);
			append_dev(a, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*item*/ 2) {
				each_value = Object.entries(/*item*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty[0] & /*$url, id*/ 5 && a_href_value !== (a_href_value = /*$url*/ ctx[2]("../:id", { id: /*id*/ ctx[0] }))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $url;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(2, $url = $$value));
	let { data } = $$props, { id } = $$props;
	const writable_props = ["data", "id"];

	Object_1$1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Update> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
	};

	$$self.$capture_state = () => {
		return { data, id, item, $url };
	};

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("item" in $$props) $$invalidate(1, item = $$props.item);
		if ("$url" in $$props) url.set($url = $$props.$url);
	};

	let item;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*data, id*/ 9) {
			 $$invalidate(1, item = data.filter(item => item.id == id)[0]);
		}
	};

	return [id, item, $url, data];
}

class Update extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { data: 3, id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Update",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*data*/ ctx[3] === undefined && !("data" in props)) {
			console.warn("<Update> was created without expected prop 'data'");
		}

		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
			console.warn("<Update> was created without expected prop 'id'");
		}
	}

	get data() {
		throw new Error("<Update>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Update>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Update>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Update>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\pages\example\_components\CrudWidget\_view.svelte generated by Svelte v3.16.4 */

const { Object: Object_1$2 } = globals;
const file$2 = "src\\pages\\example\\_components\\CrudWidget\\_view.svelte";

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i][0];
	child_ctx[5] = list[i][1];
	return child_ctx;
}

// (9:4) {#each Object.entries(item) as [name, value]}
function create_each_block$2(ctx) {
	let div;
	let b;
	let t0_value = /*name*/ ctx[4] + "";
	let t0;
	let t1;
	let t2;
	let t3_value = /*value*/ ctx[5] + "";
	let t3;
	let t4;

	const block = {
		c: function create() {
			div = element("div");
			b = element("b");
			t0 = text(t0_value);
			t1 = text(":");
			t2 = space();
			t3 = text(t3_value);
			t4 = space();
			add_location(b, file$2, 10, 8, 232);
			add_location(div, file$2, 9, 6, 217);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, b);
			append_dev(b, t0);
			append_dev(b, t1);
			append_dev(div, t2);
			append_dev(div, t3);
			append_dev(div, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*item*/ 2 && t0_value !== (t0_value = /*name*/ ctx[4] + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*item*/ 2 && t3_value !== (t3_value = /*value*/ ctx[5] + "")) set_data_dev(t3, t3_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$2.name,
		type: "each",
		source: "(9:4) {#each Object.entries(item) as [name, value]}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div1;
	let div0;
	let t0;
	let br;
	let t1;
	let a0;
	let t2;
	let a0_href_value;
	let t3;
	let a1;
	let t4;
	let a1_href_value;
	let each_value = Object.entries(/*item*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			br = element("br");
			t1 = space();
			a0 = element("a");
			t2 = text("[Back]");
			t3 = space();
			a1 = element("a");
			t4 = text("[Update]");
			add_location(div0, file$2, 7, 2, 153);
			add_location(br, file$2, 15, 2, 304);
			attr_dev(a0, "href", a0_href_value = /*$url*/ ctx[2]("../", { id: /*id*/ ctx[0] }));
			add_location(a0, file$2, 16, 2, 312);
			attr_dev(a1, "href", a1_href_value = /*$url*/ ctx[2]("../:id/update", { id: /*id*/ ctx[0] }));
			add_location(a1, file$2, 17, 2, 357);
			add_location(div1, file$2, 6, 0, 143);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div1, t0);
			append_dev(div1, br);
			append_dev(div1, t1);
			append_dev(div1, a0);
			append_dev(a0, t2);
			append_dev(div1, t3);
			append_dev(div1, a1);
			append_dev(a1, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*item*/ 2) {
				each_value = Object.entries(/*item*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty[0] & /*$url, id*/ 5 && a0_href_value !== (a0_href_value = /*$url*/ ctx[2]("../", { id: /*id*/ ctx[0] }))) {
				attr_dev(a0, "href", a0_href_value);
			}

			if (dirty[0] & /*$url, id*/ 5 && a1_href_value !== (a1_href_value = /*$url*/ ctx[2]("../:id/update", { id: /*id*/ ctx[0] }))) {
				attr_dev(a1, "href", a1_href_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let $url;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(2, $url = $$value));
	let { data } = $$props, { id } = $$props;
	const writable_props = ["data", "id"];

	Object_1$2.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<View> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
	};

	$$self.$capture_state = () => {
		return { data, id, item, $url };
	};

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(3, data = $$props.data);
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
		if ("item" in $$props) $$invalidate(1, item = $$props.item);
		if ("$url" in $$props) url.set($url = $$props.$url);
	};

	let item;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*data, id*/ 9) {
			 $$invalidate(1, item = data.filter(item => item.id == id)[0]);
		}
	};

	return [id, item, $url, data];
}

class View extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { data: 3, id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "View",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*data*/ ctx[3] === undefined && !("data" in props)) {
			console.warn("<View> was created without expected prop 'data'");
		}

		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
			console.warn("<View> was created without expected prop 'id'");
		}
	}

	get data() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<View>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<View>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\pages\example\_components\CrudWidget\Index.svelte generated by Svelte v3.16.4 */
const file$3 = "src\\pages\\example\\_components\\CrudWidget\\Index.svelte";

function create_fragment$3(ctx) {
	let div1;
	let div0;
	let h1;
	let t1;
	let current;
	var switch_value = /*component*/ ctx[2];

	function switch_props(ctx) {
		return {
			props: { data: /*data*/ ctx[0], id: /*id*/ ctx[1] },
			$$inline: true
		};
	}

	if (switch_value) {
		var switch_instance = new switch_value(switch_props(ctx));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			h1.textContent = "CrudWidget";
			t1 = space();
			if (switch_instance) create_component(switch_instance.$$.fragment);
			set_style(h1, "text-align", "center");
			set_style(h1, "margin-top", "-8px");
			add_location(h1, file$3, 14, 4, 440);
			set_style(div0, "width", "512px");
			set_style(div0, "margin", "auto");
			attr_dev(div0, "class", "card shadow");
			add_location(div0, file$3, 13, 2, 373);
			add_location(div1, file$3, 12, 0, 364);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(div0, t1);

			if (switch_instance) {
				mount_component(switch_instance, div0, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const switch_instance_changes = {};
			if (dirty[0] & /*data*/ 1) switch_instance_changes.data = /*data*/ ctx[0];
			if (dirty[0] & /*id*/ 2) switch_instance_changes.id = /*id*/ ctx[1];

			if (switch_value !== (switch_value = /*component*/ ctx[2])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, div0, null);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i: function intro(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (switch_instance) destroy_component(switch_instance);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	let $leftover;
	validate_store(leftover, "leftover");
	component_subscribe($$self, leftover, $$value => $$invalidate(4, $leftover = $$value));
	let { data } = $$props;
	const components = { list: List, update: Update, view: View };
	const writable_props = ["data"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Index> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
	};

	$$self.$capture_state = () => {
		return { data, id, action, $leftover, component };
	};

	$$self.$inject_state = $$props => {
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
		if ("id" in $$props) $$invalidate(1, id = $$props.id);
		if ("action" in $$props) $$invalidate(3, action = $$props.action);
		if ("$leftover" in $$props) leftover.set($leftover = $$props.$leftover);
		if ("component" in $$props) $$invalidate(2, component = $$props.component);
	};

	let id;
	let action;
	let component;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$leftover*/ 16) {
			 $$invalidate(1, [id, action = "view"] = $leftover.split("/"), id, ($$invalidate(3, action), $$invalidate(4, $leftover)));
		}

		if ($$self.$$.dirty[0] & /*id, action*/ 10) {
			 $$invalidate(2, component = id && components[action] || List);
		}
	};

	return [data, id, component];
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { data: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Index",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*data*/ ctx[0] === undefined && !("data" in props)) {
			console.warn("<Index> was created without expected prop 'data'");
		}
	}

	get data() {
		throw new Error("<Index>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set data(value) {
		throw new Error("<Index>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const users = [
    {
      "id": 1,
      "name": "Leanne Graham",
      "username": "Bret",
      "email": "Sincere@april.biz",
      "address": {
        "street": "Kulas Light",
        "suite": "Apt. 556",
        "city": "Gwenborough",
        "zipcode": "92998-3874",
        "geo": {
          "lat": "-37.3159",
          "lng": "81.1496"
        }
      },
      "phone": "1-770-736-8031 x56442",
      "website": "hildegard.org",
      "company": {
        "name": "Romaguera-Crona",
        "catchPhrase": "Multi-layered client-server neural-net",
        "bs": "harness real-time e-markets"
      }
    },
    {
      "id": 2,
      "name": "Ervin Howell",
      "username": "Antonette",
      "email": "Shanna@melissa.tv",
      "address": {
        "street": "Victor Plains",
        "suite": "Suite 879",
        "city": "Wisokyburgh",
        "zipcode": "90566-7771",
        "geo": {
          "lat": "-43.9509",
          "lng": "-34.4618"
        }
      },
      "phone": "010-692-6593 x09125",
      "website": "anastasia.net",
      "company": {
        "name": "Deckow-Crist",
        "catchPhrase": "Proactive didactic contingency",
        "bs": "synergize scalable supply-chains"
      }
    },
    {
      "id": 3,
      "name": "Clementine Bauch",
      "username": "Samantha",
      "email": "Nathan@yesenia.net",
      "address": {
        "street": "Douglas Extension",
        "suite": "Suite 847",
        "city": "McKenziehaven",
        "zipcode": "59590-4157",
        "geo": {
          "lat": "-68.6102",
          "lng": "-47.0653"
        }
      },
      "phone": "1-463-123-4447",
      "website": "ramiro.info",
      "company": {
        "name": "Romaguera-Jacobson",
        "catchPhrase": "Face to face bifurcated interface",
        "bs": "e-enable strategic applications"
      }
    },
    {
      "id": 4,
      "name": "Patricia Lebsack",
      "username": "Karianne",
      "email": "Julianne.OConner@kory.org",
      "address": {
        "street": "Hoeger Mall",
        "suite": "Apt. 692",
        "city": "South Elvis",
        "zipcode": "53919-4257",
        "geo": {
          "lat": "29.4572",
          "lng": "-164.2990"
        }
      },
      "phone": "493-170-9623 x156",
      "website": "kale.biz",
      "company": {
        "name": "Robel-Corkery",
        "catchPhrase": "Multi-tiered zero tolerance productivity",
        "bs": "transition cutting-edge web services"
      }
    },
    {
      "id": 5,
      "name": "Chelsey Dietrich",
      "username": "Kamren",
      "email": "Lucio_Hettinger@annie.ca",
      "address": {
        "street": "Skiles Walks",
        "suite": "Suite 351",
        "city": "Roscoeview",
        "zipcode": "33263",
        "geo": {
          "lat": "-31.8129",
          "lng": "62.5342"
        }
      },
      "phone": "(254)954-1289",
      "website": "demarco.info",
      "company": {
        "name": "Keebler LLC",
        "catchPhrase": "User-centric fault-tolerant solution",
        "bs": "revolutionize end-to-end systems"
      }
    },
    {
      "id": 6,
      "name": "Mrs. Dennis Schulist",
      "username": "Leopoldo_Corkery",
      "email": "Karley_Dach@jasper.info",
      "address": {
        "street": "Norberto Crossing",
        "suite": "Apt. 950",
        "city": "South Christy",
        "zipcode": "23505-1337",
        "geo": {
          "lat": "-71.4197",
          "lng": "71.7478"
        }
      },
      "phone": "1-477-935-8478 x6430",
      "website": "ola.org",
      "company": {
        "name": "Considine-Lockman",
        "catchPhrase": "Synchronised bottom-line interface",
        "bs": "e-enable innovative applications"
      }
    },
    {
      "id": 7,
      "name": "Kurtis Weissnat",
      "username": "Elwyn.Skiles",
      "email": "Telly.Hoeger@billy.biz",
      "address": {
        "street": "Rex Trail",
        "suite": "Suite 280",
        "city": "Howemouth",
        "zipcode": "58804-1099",
        "geo": {
          "lat": "24.8918",
          "lng": "21.8984"
        }
      },
      "phone": "210.067.6132",
      "website": "elvis.io",
      "company": {
        "name": "Johns Group",
        "catchPhrase": "Configurable multimedia task-force",
        "bs": "generate enterprise e-tailers"
      }
    },
    {
      "id": 8,
      "name": "Nicholas Runolfsdottir V",
      "username": "Maxime_Nienow",
      "email": "Sherwood@rosamond.me",
      "address": {
        "street": "Ellsworth Summit",
        "suite": "Suite 729",
        "city": "Aliyaview",
        "zipcode": "45169",
        "geo": {
          "lat": "-14.3990",
          "lng": "-120.7677"
        }
      },
      "phone": "586.493.6943 x140",
      "website": "jacynthe.com",
      "company": {
        "name": "Abernathy Group",
        "catchPhrase": "Implemented secondary concept",
        "bs": "e-enable extensible e-tailers"
      }
    },
    {
      "id": 9,
      "name": "Glenna Reichert",
      "username": "Delphine",
      "email": "Chaim_McDermott@dana.io",
      "address": {
        "street": "Dayna Park",
        "suite": "Suite 449",
        "city": "Bartholomebury",
        "zipcode": "76495-3109",
        "geo": {
          "lat": "24.6463",
          "lng": "-168.8889"
        }
      },
      "phone": "(775)976-6794 x41206",
      "website": "conrad.com",
      "company": {
        "name": "Yost and Sons",
        "catchPhrase": "Switchable contextually-based project",
        "bs": "aggregate real-time technologies"
      }
    },
    {
      "id": 10,
      "name": "Clementina DuBuque",
      "username": "Moriah.Stanton",
      "email": "Rey.Padberg@karina.biz",
      "address": {
        "street": "Kattie Turnpike",
        "suite": "Suite 198",
        "city": "Lebsackbury",
        "zipcode": "31428-2261",
        "geo": {
          "lat": "-38.2386",
          "lng": "57.2232"
        }
      },
      "phone": "024-648-3804",
      "website": "ambrose.net",
      "company": {
        "name": "Hoeger LLC",
        "catchPhrase": "Centralized empowering task-force",
        "bs": "target end-to-end models"
      }
    }
  ];

/* src\pages\example\widget\_fallback.svelte generated by Svelte v3.16.4 */
const file$4 = "src\\pages\\example\\widget\\_fallback.svelte";

function create_fragment$4(ctx) {
	let div;
	let p0;
	let t1;
	let p1;
	let t3;
	let p2;
	let t5;
	let current;
	const crudwidget = new Index({ props: { data: users }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			p0.textContent = "By using a _fallback.svelte in example/widget, we can grab the leftover URL\r\n    and pass it to an embedded widget.";
			t1 = space();
			p1 = element("p");
			p1.textContent = "Alternatively, the widget can grab the leftover URL itself.";
			t3 = space();
			p2 = element("p");
			p2.textContent = "This allows for reusable navigatable components.";
			t5 = space();
			create_component(crudwidget.$$.fragment);
			add_location(p0, file$4, 6, 2, 164);
			add_location(p1, file$4, 11, 2, 302);
			add_location(p2, file$4, 12, 2, 372);
			set_style(div, "text-align", "center");
			add_location(div, file$4, 5, 0, 128);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(div, t3);
			append_dev(div, p2);
			insert_dev(target, t5, anchor);
			mount_component(crudwidget, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(crudwidget.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(crudwidget.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t5);
			destroy_component(crudwidget, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

class Fallback extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment$4, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Fallback",
			options,
			id: create_fragment$4.name
		});
	}
}

export default Fallback;
//# sourceMappingURL=_fallback-859a796c.js.map
