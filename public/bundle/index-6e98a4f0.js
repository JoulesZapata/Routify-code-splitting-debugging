
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, h as handle_promise, v as validate_store, c as component_subscribe, z as element, B as set_style, A as add_location, b as insert_dev, n as noop, j as detach_dev, D as text, H as space, E as attr_dev, C as append_dev, I as destroy_each } from './index-4e59569a.js';
import { u as url } from './index-5bd4e51a.js';
import { f as fakeapi } from './index-14eed899.js';

/* src\pages\example\api\index.svelte generated by Svelte v3.16.4 */
const file = "src\\pages\\example\\api\\index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i].title;
	child_ctx[3] = list[i].slug;
	return child_ctx;
}

// (1:0) <script>    import { url }
function create_catch_block(ctx) {
	const block = { c: noop, m: noop, p: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(1:0) <script>    import { url }",
		ctx
	});

	return block;
}

// (16:2) {:then songs}
function create_then_block(ctx) {
	let ul;
	let each_value = /*songs*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(ul, file, 16, 4, 311);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$url*/ 1) {
				each_value = /*songs*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(16:2) {:then songs}",
		ctx
	});

	return block;
}

// (18:6) {#each songs as { title, slug }}
function create_each_block(ctx) {
	let a;
	let t0_value = /*title*/ ctx[2] + "";
	let t0;
	let t1;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(a, "href", a_href_value = /*$url*/ ctx[0]("../:slug", { slug: /*slug*/ ctx[3] }));
			attr_dev(a, "class", "card svelte-7lwx52");
			set_style(a, "text-align", "center");
			add_location(a, file, 18, 8, 365);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t0);
			append_dev(a, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$url*/ 1 && a_href_value !== (a_href_value = /*$url*/ ctx[0]("../:slug", { slug: /*slug*/ ctx[3] }))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(18:6) {#each songs as { title, slug }}",
		ctx
	});

	return block;
}

// (14:20)       Loading page...    {:then songs}
function create_pending_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Loading page...");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(14:20)       Loading page...    {:then songs}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let promise;

	let info = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 1
	};

	handle_promise(promise = fakeapi(), info);

	const block = {
		c: function create() {
			div = element("div");
			info.block.c();
			set_style(div, "width", "512px");
			set_style(div, "margin", "auto");
			set_style(div, "overflow", "auto");
			add_location(div, file, 12, 0, 189);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			info.block.m(div, info.anchor = null);
			info.mount = () => div;
			info.anchor = null;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			{
				const child_ctx = ctx.slice();
				child_ctx[1] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			info.block.d();
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $url;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(0, $url = $$value));

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("$url" in $$props) url.set($url = $$props.$url);
	};

	return [$url];
}

class Api extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Api",
			options,
			id: create_fragment.name
		});
	}
}

export default Api;
//# sourceMappingURL=index-6e98a4f0.js.map
