
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, c as component_subscribe, z as element, D as text, E as attr_dev, F as toggle_class, A as add_location, b as insert_dev, C as append_dev, G as set_data_dev, j as detach_dev, H as space, n as noop, I as destroy_each, J as create_slot, m as create_component, o as mount_component, K as get_slot_context, L as get_slot_changes, t as transition_in, f as transition_out, w as destroy_component } from './index-4e59569a.js';
import { u as url, i as isActive } from './index-5bd4e51a.js';

/* src\pages\example\_components\NavLinks.svelte generated by Svelte v3.16.4 */
const file = "src\\pages\\example\\_components\\NavLinks.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].href;
	child_ctx[5] = list[i].name;
	child_ctx[6] = list[i].active;
	return child_ctx;
}

// (52:4) {#each links as { href, name, active }}
function create_each_block(ctx) {
	let a;
	let t_value = /*name*/ ctx[5] + "";
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			attr_dev(a, "class", "link svelte-42fui9");
			attr_dev(a, "href", a_href_value = /*href*/ ctx[4]);
			toggle_class(a, "active", /*active*/ ctx[6]);
			add_location(a, file, 52, 6, 1086);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*links*/ 1 && t_value !== (t_value = /*name*/ ctx[5] + "")) set_data_dev(t, t_value);

			if (dirty[0] & /*links*/ 1 && a_href_value !== (a_href_value = /*href*/ ctx[4])) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty[0] & /*links*/ 1) {
				toggle_class(a, "active", /*active*/ ctx[6]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(52:4) {#each links as { href, name, active }}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let aside;
	let div;
	let a;
	let t0;
	let a_href_value;
	let t1;
	let each_value = /*links*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			aside = element("aside");
			div = element("div");
			a = element("a");
			t0 = text("⇐ BACK TO APP");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(a, "class", "backlink svelte-42fui9");
			attr_dev(a, "href", a_href_value = /*$url*/ ctx[1]("/"));
			add_location(a, file, 50, 4, 973);
			attr_dev(div, "class", "nav svelte-42fui9");
			add_location(div, file, 49, 2, 950);
			attr_dev(aside, "class", "svelte-42fui9");
			add_location(aside, file, 48, 0, 939);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, aside, anchor);
			append_dev(aside, div);
			append_dev(div, a);
			append_dev(a, t0);
			append_dev(div, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$url*/ 2 && a_href_value !== (a_href_value = /*$url*/ ctx[1]("/"))) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty[0] & /*links*/ 1) {
				each_value = /*links*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(aside);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $url;
	let $isActive;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(1, $url = $$value));
	validate_store(isActive, "isActive");
	component_subscribe($$self, isActive, $$value => $$invalidate(2, $isActive = $$value));

	const _links = [
		["./index", "Home"],
		["./modal", "Modal"],
		["./reset", "Reset"],
		["./nesting", "Nesting"],
		["./widget", "Widget"],
		["./aliasing", "Aliasing"],
		["./404", "404"],
		["./api", "Api"]
	];

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("links" in $$props) $$invalidate(0, links = $$props.links);
		if ("$url" in $$props) url.set($url = $$props.$url);
		if ("$isActive" in $$props) isActive.set($isActive = $$props.$isActive);
	};

	let links;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$url, $isActive*/ 6) {
			 $$invalidate(0, links = _links.map(([path, name]) => {
				return {
					href: $url(path, {}),
					name,
					active: $isActive(path)
				};
			}));
		}
	};

	return [links, $url];
}

class NavLinks extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "NavLinks",
			options,
			id: create_fragment.name
		});
	}
}

/* src\pages\example\_reset.svelte generated by Svelte v3.16.4 */
const file$1 = "src\\pages\\example\\_reset.svelte";

function create_fragment$1(ctx) {
	let div2;
	let div0;
	let t;
	let div1;
	let current;
	const navlinks = new NavLinks({ $$inline: true });
	const default_slot_template = /*$$slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			create_component(navlinks.$$.fragment);
			t = space();
			div1 = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", "nav svelte-1qeghgx");
			add_location(div0, file$1, 38, 2, 924);
			attr_dev(div1, "class", "main svelte-1qeghgx");
			add_location(div1, file$1, 41, 2, 973);
			attr_dev(div2, "class", "example svelte-1qeghgx");
			add_location(div2, file$1, 37, 0, 899);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			mount_component(navlinks, div0, null);
			append_dev(div2, t);
			append_dev(div2, div1);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot && default_slot.p && dirty[0] & /*$$scope*/ 1) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[0], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(navlinks.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(navlinks.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			destroy_component(navlinks);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return [$$scope, $$slots];
}

class Reset extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Reset",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Reset;
//# sourceMappingURL=_reset-2ca8edd9.js.map
