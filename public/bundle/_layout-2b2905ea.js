
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, J as create_slot, v as validate_store, c as component_subscribe, z as element, D as text, H as space, E as attr_dev, M as null_to_empty, A as add_location, b as insert_dev, C as append_dev, K as get_slot_context, L as get_slot_changes, t as transition_in, f as transition_out, j as detach_dev } from './index-4e59569a.js';
import { r as route, u as url } from './index-5bd4e51a.js';

/* src\pages\example\modal\_layout.svelte generated by Svelte v3.16.4 */
const file = "src\\pages\\example\\modal\\_layout.svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let a0;
	let t0;
	let a0_href_value;
	let a0_class_value;
	let t1;
	let a1;
	let t2;
	let a1_href_value;
	let a1_class_value;
	let t3;
	let br;
	let t4;
	let current;
	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			a0 = element("a");
			t0 = text("Basic");
			t1 = space();
			a1 = element("a");
			t2 = text("Animated");
			t3 = space();
			br = element("br");
			t4 = space();
			if (default_slot) default_slot.c();
			attr_dev(a0, "href", a0_href_value = /*$url*/ ctx[1]("./basic"));
			attr_dev(a0, "class", a0_class_value = "" + (null_to_empty(/*active*/ ctx[0] === "basic" ? "active" : "") + " svelte-n4f91r"));
			add_location(a0, file, 60, 4, 1099);
			attr_dev(a1, "href", a1_href_value = /*$url*/ ctx[1]("./animated"));
			attr_dev(a1, "class", a1_class_value = "" + (null_to_empty(/*active*/ ctx[0] === "animated" ? "active" : "") + " svelte-n4f91r"));
			add_location(a1, file, 63, 4, 1197);
			attr_dev(div0, "class", "center svelte-n4f91r");
			add_location(div0, file, 59, 2, 1073);
			attr_dev(br, "class", "svelte-n4f91r");
			add_location(br, file, 68, 2, 1314);
			attr_dev(div1, "class", "svelte-n4f91r");
			add_location(div1, file, 57, 0, 1062);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, a0);
			append_dev(a0, t0);
			append_dev(div0, t1);
			append_dev(div0, a1);
			append_dev(a1, t2);
			append_dev(div1, t3);
			append_dev(div1, br);
			append_dev(div1, t4);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*$url*/ 2 && a0_href_value !== (a0_href_value = /*$url*/ ctx[1]("./basic"))) {
				attr_dev(a0, "href", a0_href_value);
			}

			if (!current || dirty[0] & /*active*/ 1 && a0_class_value !== (a0_class_value = "" + (null_to_empty(/*active*/ ctx[0] === "basic" ? "active" : "") + " svelte-n4f91r"))) {
				attr_dev(a0, "class", a0_class_value);
			}

			if (!current || dirty[0] & /*$url*/ 2 && a1_href_value !== (a1_href_value = /*$url*/ ctx[1]("./animated"))) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (!current || dirty[0] & /*active*/ 1 && a1_class_value !== (a1_class_value = "" + (null_to_empty(/*active*/ ctx[0] === "animated" ? "active" : "") + " svelte-n4f91r"))) {
				attr_dev(a1, "class", a1_class_value);
			}

			if (default_slot && default_slot.p && dirty[0] & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $route;
	let $url;
	validate_store(route, "route");
	component_subscribe($$self, route, $$value => $$invalidate(3, $route = $$value));
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(1, $url = $$value));
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("match" in $$props) $$invalidate(2, match = $$props.match);
		if ("$route" in $$props) route.set($route = $$props.$route);
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
		if ("$url" in $$props) url.set($url = $$props.$url);
	};

	let match;
	let active;

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*$route*/ 8) {
			 $$invalidate(2, match = $route.path.match(/\/modal\/([^\/]+)\//));
		}

		if ($$self.$$.dirty[0] & /*match*/ 4) {
			 $$invalidate(0, active = match && match[1]);
		}
	};

	return [active, $url, match, $route, $$scope, $$slots];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment.name
		});
	}
}

export default Layout;
//# sourceMappingURL=_layout-2b2905ea.js.map
