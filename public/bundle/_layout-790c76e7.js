
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, J as create_slot, v as validate_store, c as component_subscribe, z as element, H as space, D as text, A as add_location, E as attr_dev, b as insert_dev, C as append_dev, K as get_slot_context, L as get_slot_changes, t as transition_in, f as transition_out, j as detach_dev } from './index-4e59569a.js';
import { u as url } from './index-5bd4e51a.js';

/* src\pages\example\aliasing\v1.1\_layout.svelte generated by Svelte v3.16.4 */
const file = "src\\pages\\example\\aliasing\\v1.1\\_layout.svelte";

function create_fragment(ctx) {
	let p0;
	let t1;
	let p1;
	let t3;
	let code;
	let pre;
	let t7;
	let a0;
	let t8;
	let a0_href_value;
	let t9;
	let a1;
	let t10;
	let a1_href_value;
	let t11;
	let a2;
	let t12;
	let a2_href_value;
	let t13;
	let current;
	const default_slot_template = /*$$slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

	const block = {
		c: function create() {
			p0 = element("p");
			p0.textContent = "V1.1 has only one file: feature2.svelte";
			t1 = space();
			p1 = element("p");
			p1.textContent = "The rest are handled with _fallback.svelte, which redirects to v1";
			t3 = space();
			code = element("code");
			pre = element("pre");

			pre.textContent = `
    /** _fallback.svelte **/
    import ${`{(goto, leftover)}`} from '@sveltech/routify'
    \$goto('../../v1/'+\$leftover, null, true, true)
  `;

			t7 = space();
			a0 = element("a");
			t8 = text("Feature 1");
			t9 = space();
			a1 = element("a");
			t10 = text("Feature 2");
			t11 = space();
			a2 = element("a");
			t12 = text("Feature 3");
			t13 = space();
			if (default_slot) default_slot.c();
			add_location(p0, file, 4, 0, 67);
			add_location(p1, file, 5, 0, 115);
			add_location(pre, file, 8, 2, 201);
			add_location(code, file, 7, 0, 191);
			attr_dev(a0, "href", a0_href_value = /*$url*/ ctx[0]("./feature1"));
			add_location(a0, file, 15, 0, 371);
			attr_dev(a1, "href", a1_href_value = /*$url*/ ctx[0]("./feature2"));
			add_location(a1, file, 16, 0, 415);
			attr_dev(a2, "href", a2_href_value = /*$url*/ ctx[0]("./feature3"));
			add_location(a2, file, 17, 0, 459);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, p0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, p1, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, code, anchor);
			append_dev(code, pre);
			insert_dev(target, t7, anchor);
			insert_dev(target, a0, anchor);
			append_dev(a0, t8);
			insert_dev(target, t9, anchor);
			insert_dev(target, a1, anchor);
			append_dev(a1, t10);
			insert_dev(target, t11, anchor);
			insert_dev(target, a2, anchor);
			append_dev(a2, t12);
			insert_dev(target, t13, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*$url*/ 1 && a0_href_value !== (a0_href_value = /*$url*/ ctx[0]("./feature1"))) {
				attr_dev(a0, "href", a0_href_value);
			}

			if (!current || dirty[0] & /*$url*/ 1 && a1_href_value !== (a1_href_value = /*$url*/ ctx[0]("./feature2"))) {
				attr_dev(a1, "href", a1_href_value);
			}

			if (!current || dirty[0] & /*$url*/ 1 && a2_href_value !== (a2_href_value = /*$url*/ ctx[0]("./feature3"))) {
				attr_dev(a2, "href", a2_href_value);
			}

			if (default_slot && default_slot.p && dirty[0] & /*$$scope*/ 2) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[1], null), get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null));
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(code);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(a0);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(a1);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(a2);
			if (detaching) detach_dev(t13);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $url;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(0, $url = $$value));
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("$url" in $$props) url.set($url = $$props.$url);
	};

	return [$url, $$scope, $$slots];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment.name
		});
	}
}

export default Layout;
//# sourceMappingURL=_layout-790c76e7.js.map
