
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, c as component_subscribe, z as element, D as text, E as attr_dev, A as add_location, y as listen_dev, b as insert_dev, C as append_dev, G as set_data_dev, n as noop, j as detach_dev } from './index-4e59569a.js';
import { g as goto } from './index-5bd4e51a.js';

/* src\pages\example\modal\basic\[key].svelte generated by Svelte v3.16.4 */
const file = "src\\pages\\example\\modal\\basic\\[key].svelte";

function create_fragment(ctx) {
	let div1;
	let div0;
	let t;
	let dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t = text(/*key*/ ctx[0]);
			attr_dev(div0, "class", "modal");
			add_location(div0, file, 7, 2, 151);
			attr_dev(div1, "class", "container");
			add_location(div1, file, 6, 0, 93);
			dispose = listen_dev(div1, "click", /*click_handler*/ ctx[2], false, false, false);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*key*/ 1) set_data_dev(t, /*key*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $goto;
	validate_store(goto, "goto");
	component_subscribe($$self, goto, $$value => $$invalidate(1, $goto = $$value));
	let { key } = $$props;
	const writable_props = ["key"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bkeyu5D> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $goto("../");

	$$self.$set = $$props => {
		if ("key" in $$props) $$invalidate(0, key = $$props.key);
	};

	$$self.$capture_state = () => {
		return { key, $goto };
	};

	$$self.$inject_state = $$props => {
		if ("key" in $$props) $$invalidate(0, key = $$props.key);
		if ("$goto" in $$props) goto.set($goto = $$props.$goto);
	};

	return [key, $goto, click_handler];
}

class U5Bkeyu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { key: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bkeyu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*key*/ ctx[0] === undefined && !("key" in props)) {
			console.warn("<U5Bkeyu5D> was created without expected prop 'key'");
		}
	}

	get key() {
		throw new Error("<U5Bkeyu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set key(value) {
		throw new Error("<U5Bkeyu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bkeyu5D;
//# sourceMappingURL=[key]-2e1bafa0.js.map
