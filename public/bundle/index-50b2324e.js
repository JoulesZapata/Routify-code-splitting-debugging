
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, h as handle_promise, e as empty, b as insert_dev, n as noop, j as detach_dev, z as element, D as text, H as space, A as add_location, E as attr_dev, B as set_style, C as append_dev, G as set_data_dev } from './index-4e59569a.js';
import './index-5bd4e51a.js';
import { f as fakeapi } from './index-14eed899.js';

/* src\pages\example\api\[slug]\index.svelte generated by Svelte v3.16.4 */
const file = "src\\pages\\example\\api\\[slug]\\index.svelte";

// (1:0) <script>    import { url }
function create_catch_block(ctx) {
	const block = { c: noop, m: noop, p: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_catch_block.name,
		type: "catch",
		source: "(1:0) <script>    import { url }",
		ctx
	});

	return block;
}

// (14:0) {:then song}
function create_then_block(ctx) {
	let div;
	let h3;
	let t0_value = /*song*/ ctx[1].title + "";
	let t0;
	let t1;
	let h5;
	let t2_value = /*song*/ ctx[1].artist + "";
	let t2;
	let t3;
	let iframe;
	let iframe_src_value;

	const block = {
		c: function create() {
			div = element("div");
			h3 = element("h3");
			t0 = text(t0_value);
			t1 = space();
			h5 = element("h5");
			t2 = text(t2_value);
			t3 = space();
			iframe = element("iframe");
			add_location(h3, file, 15, 4, 287);
			add_location(h5, file, 16, 4, 314);
			attr_dev(iframe, "width", "420");
			attr_dev(iframe, "height", "315");
			if (iframe.src !== (iframe_src_value = /*song*/ ctx[1].url)) attr_dev(iframe, "src", iframe_src_value);
			iframe.allowFullscreen = true;
			add_location(iframe, file, 17, 4, 342);
			attr_dev(div, "class", "card svelte-1qbjvvo");
			set_style(div, "width", "512px");
			set_style(div, "margin", "auto");
			add_location(div, file, 14, 2, 228);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h3);
			append_dev(h3, t0);
			append_dev(div, t1);
			append_dev(div, h5);
			append_dev(h5, t2);
			append_dev(div, t3);
			append_dev(div, iframe);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*slug*/ 1 && t0_value !== (t0_value = /*song*/ ctx[1].title + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*slug*/ 1 && t2_value !== (t2_value = /*song*/ ctx[1].artist + "")) set_data_dev(t2, t2_value);

			if (dirty[0] & /*slug*/ 1 && iframe.src !== (iframe_src_value = /*song*/ ctx[1].url)) {
				attr_dev(iframe, "src", iframe_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_then_block.name,
		type: "then",
		source: "(14:0) {:then song}",
		ctx
	});

	return block;
}

// (12:22)     Loading page...  {:then song}
function create_pending_block(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Loading page...");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_pending_block.name,
		type: "pending",
		source: "(12:22)     Loading page...  {:then song}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let await_block_anchor;
	let promise;

	let info = {
		ctx,
		current: null,
		token: null,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 1
	};

	handle_promise(promise = fakeapi(/*slug*/ ctx[0]), info);

	const block = {
		c: function create() {
			await_block_anchor = empty();
			info.block.c();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty[0] & /*slug*/ 1 && promise !== (promise = fakeapi(/*slug*/ ctx[0])) && handle_promise(promise, info)) ; else {
				const child_ctx = ctx.slice();
				child_ctx[1] = info.resolved;
				info.block.p(child_ctx, dirty);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { slug } = $$props;
	const writable_props = ["slug"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("slug" in $$props) $$invalidate(0, slug = $$props.slug);
	};

	$$self.$capture_state = () => {
		return { slug };
	};

	$$self.$inject_state = $$props => {
		if ("slug" in $$props) $$invalidate(0, slug = $$props.slug);
	};

	return [slug];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { slug: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*slug*/ ctx[0] === undefined && !("slug" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'slug'");
		}
	}

	get slug() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set slug(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
//# sourceMappingURL=index-50b2324e.js.map
