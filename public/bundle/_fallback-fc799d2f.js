
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, v as validate_store, c as component_subscribe, n as noop } from './index-4e59569a.js';
import { g as goto, l as leftover } from './index-5bd4e51a.js';

/* src\pages\example\aliasing\v1.1\_fallback.svelte generated by Svelte v3.16.4 */

function create_fragment(ctx) {
	const block = {
		c: noop,
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $goto;
	let $leftover;
	validate_store(goto, "goto");
	component_subscribe($$self, goto, $$value => $$invalidate(0, $goto = $$value));
	validate_store(leftover, "leftover");
	component_subscribe($$self, leftover, $$value => $$invalidate(1, $leftover = $$value));
	$goto("../../v1/" + $leftover, null, true, true);

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("$goto" in $$props) goto.set($goto = $$props.$goto);
		if ("$leftover" in $$props) leftover.set($leftover = $$props.$leftover);
	};

	return [];
}

class Fallback extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Fallback",
			options,
			id: create_fragment.name
		});
	}
}

export default Fallback;
//# sourceMappingURL=_fallback-fc799d2f.js.map
