
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.head.appendChild(r) })(window.document);
import { i as is_function, l as assign, N as identity, S as SvelteComponentDev, a as init, s as safe_not_equal, d as dispatch_dev, z as element, E as attr_dev, A as add_location, b as insert_dev, O as add_render_callback, P as create_in_transition, Q as create_out_transition, j as detach_dev, e as empty, t as transition_in, u as group_outros, f as transition_out, x as check_outros, J as create_slot, v as validate_store, c as component_subscribe, m as create_component, H as space, D as text, B as set_style, o as mount_component, C as append_dev, w as destroy_component, K as get_slot_context, L as get_slot_changes, I as destroy_each } from './index-4e59569a.js';
import { u as url, p as params } from './index-5bd4e51a.js';

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}
function fade(node, { delay = 0, duration = 400, easing = identity }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}
function crossfade(_a) {
    var { fallback } = _a, defaults = __rest(_a, ["fallback"]);
    const to_receive = new Map();
    const to_send = new Map();
    function crossfade(from, node, params) {
        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);
        const to = node.getBoundingClientRect();
        const dx = from.left - to.left;
        const dy = from.top - to.top;
        const dw = from.width / to.width;
        const dh = from.height / to.height;
        const d = Math.sqrt(dx * dx + dy * dy);
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        const opacity = +style.opacity;
        return {
            delay,
            duration: is_function(duration) ? duration(d) : duration,
            easing,
            css: (t, u) => `
				opacity: ${t * opacity};
				transform-origin: top left;
				transform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});
			`
        };
    }
    function transition(items, counterparts, intro) {
        return (node, params) => {
            items.set(params.key, {
                rect: node.getBoundingClientRect()
            });
            return () => {
                if (counterparts.has(params.key)) {
                    const { rect } = counterparts.get(params.key);
                    counterparts.delete(params.key);
                    return crossfade(rect, node, params);
                }
                // if the node is disappearing altogether
                // (i.e. wasn't claimed by the other list)
                // then we need to supply an outro
                items.delete(params.key);
                return fallback && fallback(node, params, intro);
            };
        };
    }
    return [
        transition(to_send, to_receive, false),
        transition(to_receive, to_send, true)
    ];
}

/* src\pages\example\modal\animated\_target.svelte generated by Svelte v3.16.4 */

const file = "src\\pages\\example\\modal\\animated\\_target.svelte";

// (16:0) {#if !hide}
function create_if_block(ctx) {
	let div;
	let div_intro;
	let div_outro;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "canvas svelte-1j33be0");
			add_location(div, file, 16, 2, 201);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			if (local) {
				add_render_callback(() => {
					if (div_outro) div_outro.end(1);
					if (!div_intro) div_intro = create_in_transition(div, /*receive*/ ctx[1], { key: "modal" });
					div_intro.start();
				});
			}

			current = true;
		},
		o: function outro(local) {
			if (div_intro) div_intro.invalidate();

			if (local) {
				div_outro = create_out_transition(div, /*send*/ ctx[0], { key: "modal" });
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_outro) div_outro.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(16:0) {#if !hide}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = !/*hide*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (!/*hide*/ ctx[2]) {
				if (!if_block) {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					transition_in(if_block, 1);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			transition_in(if_block);
		},
		o: function outro(local) {
			transition_out(if_block);
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { send } = $$props, { receive } = $$props, { hide } = $$props;
	const writable_props = ["send", "receive", "hide"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Target> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("send" in $$props) $$invalidate(0, send = $$props.send);
		if ("receive" in $$props) $$invalidate(1, receive = $$props.receive);
		if ("hide" in $$props) $$invalidate(2, hide = $$props.hide);
	};

	$$self.$capture_state = () => {
		return { send, receive, hide };
	};

	$$self.$inject_state = $$props => {
		if ("send" in $$props) $$invalidate(0, send = $$props.send);
		if ("receive" in $$props) $$invalidate(1, receive = $$props.receive);
		if ("hide" in $$props) $$invalidate(2, hide = $$props.hide);
	};

	return [send, receive, hide];
}

class Target extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { send: 0, receive: 1, hide: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Target",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*send*/ ctx[0] === undefined && !("send" in props)) {
			console.warn("<Target> was created without expected prop 'send'");
		}

		if (/*receive*/ ctx[1] === undefined && !("receive" in props)) {
			console.warn("<Target> was created without expected prop 'receive'");
		}

		if (/*hide*/ ctx[2] === undefined && !("hide" in props)) {
			console.warn("<Target> was created without expected prop 'hide'");
		}
	}

	get send() {
		throw new Error("<Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set send(value) {
		throw new Error("<Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get receive() {
		throw new Error("<Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set receive(value) {
		throw new Error("<Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get hide() {
		throw new Error("<Target>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set hide(value) {
		throw new Error("<Target>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\pages\example\modal\animated\_layout.svelte generated by Svelte v3.16.4 */
const file$1 = "src\\pages\\example\\modal\\animated\\_layout.svelte";
const get_default_slot_changes = dirty => ({});

const get_default_slot_context = ctx => ({
	scoped: {
		send: /*send*/ ctx[2],
		receive: /*receive*/ ctx[3],
		fade
	}
});

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	child_ctx[8] = i;
	return child_ctx;
}

// (11:2) {#each Array(12) as item, key}
function create_each_block(ctx) {
	let a;
	let t0;
	let div;
	let t1;
	let t2;
	let a_href_value;
	let current;

	const target = new Target({
			props: {
				receive: /*receive*/ ctx[3],
				send: /*send*/ ctx[2],
				hide: /*$params*/ ctx[1].key == /*key*/ ctx[8]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			a = element("a");
			create_component(target.$$.fragment);
			t0 = space();
			div = element("div");
			t1 = text(/*key*/ ctx[8]);
			t2 = space();
			attr_dev(div, "class", "content");
			set_style(div, "color", "white");
			add_location(div, file$1, 16, 6, 670);
			attr_dev(a, "class", "card");
			attr_dev(a, "href", a_href_value = /*$url*/ ctx[0]("./:key", { key: /*key*/ ctx[8] }));
			set_style(a, "background", "#333");
			add_location(a, file$1, 11, 4, 316);
		},
		m: function mount(target$1, anchor) {
			insert_dev(target$1, a, anchor);
			mount_component(target, a, null);
			append_dev(a, t0);
			append_dev(a, div);
			append_dev(div, t1);
			append_dev(a, t2);
			current = true;
		},
		p: function update(ctx, dirty) {
			const target_changes = {};
			if (dirty[0] & /*$params*/ 2) target_changes.hide = /*$params*/ ctx[1].key == /*key*/ ctx[8];
			target.$set(target_changes);

			if (!current || dirty[0] & /*$url*/ 1 && a_href_value !== (a_href_value = /*$url*/ ctx[0]("./:key", { key: /*key*/ ctx[8] }))) {
				attr_dev(a, "href", a_href_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(target.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(target.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_component(target);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(11:2) {#each Array(12) as item, key}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let t;
	let current;
	let each_value = Array(12);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const default_slot_template = /*$$slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], get_default_slot_context);

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (default_slot) default_slot.c();
			attr_dev(div, "class", "cards");
			add_location(div, file$1, 9, 0, 257);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*$url, receive, send, $params*/ 15) {
				each_value = Array(12);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (default_slot && default_slot.p && dirty[0] & /*$$scope*/ 16) {
				default_slot.p(get_slot_context(default_slot_template, ctx, /*$$scope*/ ctx[4], get_default_slot_context), get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, get_default_slot_changes));
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $url;
	let $params;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(0, $url = $$value));
	validate_store(params, "params");
	component_subscribe($$self, params, $$value => $$invalidate(1, $params = $$value));
	const [send, receive] = crossfade({});
	let { $$slots = {}, $$scope } = $$props;

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("$url" in $$props) url.set($url = $$props.$url);
		if ("$params" in $$props) params.set($params = $$props.$params);
	};

	return [$url, $params, send, receive, $$scope, $$slots];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment$1.name
		});
	}
}

export default Layout;
//# sourceMappingURL=_layout-87b4dd0f.js.map
